swagger: "2.0"

info:
  version: 1.0.0
  title: Comments
  description: Comments API

host: localhost:8080

consumes:
  - application/json
produces:
  - application/json

definitions:
  commentId:
    type: integer
    description: the id of the comment
    example: 123456

  comment:
    type: object
    required:
      - content
    properties:
      id:
        type: integer
        description: the id of the comment
      parent_id:
        type: integer
        description: the id of the parent comment (null for root comment)
      content:
        type: string
        description: comment text
        example: Comment content
      created:
        type: date-time
        description: date and time when comment was created
      updated:
        type: date-time
        description: date and time when comment was last updated
      children:
        $ref: "#/definitions/commentList"

  commentList:
    type: array
    items:
      $ref: "#/definitions/comment"

  address:
    type: object
    properties:
      street:
        type: string
        minLength: 1
      city:
        type: string
        minLength: 1
      state:
        type: string
        minLength: 2
        maxLength: 2
        pattern: "^[A-Z]+$"
      zipcode:
        type: integer
        minimum: 10000
        maximum: 99999

parameters:
  commentId:
    name: id
    in: path
    description: Id of the comment
    required: true
    type: integer

  petName:
    name: petName
    in: path
    description: Name of the pet
    required: true
    type: string

paths:
  /comments:
    get:
      summary: Returns a list of the root comments
      operationId: getRootComments
      tags:
        - comments
      responses:
        default:
          description: A list of the root comments
          schema:
            type: object
            properties:
              comments:
                $ref: "#/definitions/commentList"

    post:
      summary: Creates a new comment
      operationId: createComment
      tags:
        - comments
      parameters:
        - name: comment
          in: body
          description: The comment to create
          required: true
          schema:
            $ref: "#/definitions/comment"
      responses:
        default:
          description: Returns an id of the newly-created comment
          schema:
            $ref: "#/definitions/commentId"
        400:
          description: Invalid params

  /comments/{id}:
    parameters:
      - $ref: "#/parameters/commentId"

    get:
      summary: Returns the comment tree
      operationId: getComment
      tags:
        - comments
      responses:
        default:
          description: The comment
          schema:
            $ref: "#/definitions/comment"
        404:
          description: Comment not found

    patch:
      summary: Updates a comment
      operationId: updateComment
      tags:
        - comments
      parameters:
        - name: comment
          in: body
          description: The updated comment
          required: true
          schema:
            $ref: "#/definitions/comment"
      responses:
        default:
          description: Returns number of the updated comments
          schema:
            type: object
            properties:
              updated:
                type: integer
                description: The number of the updated comments
                example: 1
        400:
          description: Invalid params

    delete:
      summary: Deletes the comment
      operationId: deleteComment
      tags:
        - comments
      responses:
        default:
          description: Returns the number of the deleted comments
          schema:
            type: object
            properties:
              deleted:
                type: integer
                description: The number of the deleted comments
                example: 2

  /pets/{petName}:
    parameters:
      - $ref: "#/parameters/petName"

    get:
      description: Returns a pet by name
      operationId: findPetByName
      responses:
        default:
          description: Returns the pet data
          schema:
            $ref: "#/definitions/pet"
          headers:
            last-modified:
              type: string
              description: The date/time that the pet was last modified

    delete:
      description: Deletes a single pet based on the name supplied
      operationId: deletePet
      responses:
        default:
          description: Returns the pet that was deleted
          schema:
            $ref: "#/definitions/pet"

    patch:
      description: Updates a pet by name
      parameters:
        - name: pet
          in: body
          description: The updated pet info
          required: true
          schema:
            $ref: "#/definitions/pet"
      responses:
        default:
          description: Returns the updated pet data
          schema:
            $ref: "#/definitions/pet"

  /pets/{petName}/photos:
    parameters:
      - $ref: "#/parameters/petName"

    post:
      description: Upload a new pet photo
      operationId: addPetPhoto
      consumes:
        - multipart/form-data
      parameters:
        - name: id
          in: formData
          description: The photo ID (generated automatically)
          type: integer
          format: int32
          minimum: 1
        - name: label
          in: formData
          description: A label for the photo
          required: true
          type: string
          minLength: 1
        - name: description
          in: formData
          description: An optional description of the photo
          type: string
        - name: photo
          in: formData
          description: The pet photo
          required: true
          type: file
          minLength: 1
          maxLength: 5000000  # ~5MB
      responses:
        default:
          description: Returns the photo information
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int32
                description: The auto-generated photo ID
              label:
                type: string
              description:
                type: string
              photo:
                type: object
                description: Information about the photo (size, file name, etc.)
          headers:
            Location:
              type: string
              description: The URL of the newly-added photo

    get:
      description: Get a list of the photos for a pet
      responses:
        200:
          description: Returns the list of photos
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int32
                  description: The auto-generated photo ID
                label:
                  type: string
                description:
                  type: string
                photo:
                  type: object
                  description: Information about the photo (size, file name, etc.)

  /pets/{petName}/photos/{id}:
    parameters:
      - $ref: "#/parameters/petName"
      - name: id
        in: path
        description: The ID of the photo
        required: true
        type: integer
        format: int32

    get:
      description: Gets a pet photo
      operationId: getPetPhoto
      produces:
        - image/jpeg
        - image/gif
        - image/png
        - image/bmp
      responses:
        default:
          description: Returns the pet photo
          schema:
            type: file

    delete:
      description: Deletes a pet photo
      operationId: deletePetPhoto
      responses:
        default:
          description: The photo was deleted successfully

  /:
    get:
      produces:
        - text/html
      responses:
        default:
          description: The Swagger Pet Store homepage :)
          schema:
            type: file
            default:
              $ref: index.html
